import os
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, Message
from core.config import config
from aiogram import F, Router, Bot
from core.keyboards import TextUser, Button
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import StateFilter
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ChatType
import database as db
from aiogram.filters.command import Command
import random
from aiogram import Bot, Router

global Sum
ActivateQuantity = 1
CheckId = 0
global LinkCheckId
global RealCheckId
MaxQuantity = 0

CheckRouter = Router()


class FSMFillFrom(StatesGroup):
    GetPriceForPersonalCheck = State()
    GetPriceForMultiCheck = State()
    GetActivate = State()
    GetChannel = State()
    GetPublicGroup = State()
    GetPrivateGroup = State()


@CheckRouter.message(Command('check'))
async def ReferralLinkCommand(message: Message, bot: Bot):
    await Check(message)


@CheckRouter.message(F.text == 'ü¶ã –ß–µ–∫–∏')
async def Check(message: Message):
    await message.answer(TextUser.TextAddCheck, reply_markup=Button.CheckPersonOrMultiKeyboard,
                         parse_mode=ParseMode.HTML)


@CheckRouter.message(F.text == '–ù–∞–∑–∞–¥')
async def CheckPay(message: Message, state: FSMContext):
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM
    await state.clear()
    await message.delete()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer('–í—ã –ø–æ–ø–∞–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=Button.ReplyAdminMainKeyboard)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞c —Ä–∞–∑–¥–µ–ª:', reply_markup=Button.ReplyStartKeyboard)


@CheckRouter.callback_query(F.data == 'personal_check')
async def PersonalCheck(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(TextUser.TextPersonalCheck,
                                  reply_markup=await Button.GenerateCheckPersonal(callback.from_user.id),
                                  parse_mode=ParseMode.HTML)


@CheckRouter.callback_query(F.data == 'GenerateCheckForPersonal')
async def GenerateCheck(callback: CallbackQuery, state: FSMContext):
    Balance = await db.GetBalance(callback.from_user.id)
    TextGenerateCheck = 'üßæ<b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n' \
                        '\n' \
                        '–°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–º–æ—â—å—é \n' \
                        '—á–µ–∫–∞?\n' \
                        '\n' \
                        f'<b>–ú–∞–∫—Å–∏–º—É–º: {Balance[0]} –†–£–ë</b>\n' \
                        f'–ú–∏–Ω–∏–º—É–º: 0,1 –†–£–ë \n' \
                        f'\n' \
                        f'<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞ –≤ —Ä—É–±–ª—è—Ö:</b>'
    await callback.message.delete()
    await callback.message.answer(TextGenerateCheck, reply_markup=await Button.check_maxmin_keyboard(Balance[0]),
                                  parse_mode=ParseMode.HTML)
    await state.set_state(FSMFillFrom.GetPriceForPersonalCheck)


@CheckRouter.message(FSMFillFrom.GetPriceForPersonalCheck)
async def GetPrice(message: Message, state: FSMContext):
    global Sum
    Sum = message.text
    TextForUserCreateCheck = "üßæ<b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n" \
                             "\n" \
                             f"<b>–°—É–º–º–∞ —á–µ–∫–∞:</b> {message.text}\n" \
                             f"\n" \
                             f"üî∏ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:</b>"
    await message.answer(TextForUserCreateCheck, reply_markup=await Button.ConfirmCheck('personal'),
                         parse_mode=ParseMode.HTML)


@CheckRouter.callback_query(F.data.startswith('auto_check_personal_'))
async def ConfirmCheck(callback: CallbackQuery, state: FSMContext):
    global Sum
    Sum = str(callback.data[20:])
    TextForUserCreateCheck = "üßæ<b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n" \
                             "\n" \
                             f"<b>–°—É–º–º–∞ —á–µ–∫–∞:</b> {Sum}\n" \
                             f"\n" \
                             f"üî∏ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:</b>"
    await callback.message.answer(TextForUserCreateCheck, reply_markup=await Button.ConfirmCheck('personal'),
                                  parse_mode=ParseMode.HTML)


@CheckRouter.callback_query(F.data.startswith('ConfirmCheck_'))
async def ConfirmCheck(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    id = callback.from_user.id
    TypeCheck = str(callback.data[13:])
    rand = round(random.random() * 100)
    LinkIdCheck = int(id) * int(rand)
    await db.WriteOffTheBalance(callback.from_user.id, float(Sum) * int(ActivateQuantity))
    CheckLink = f'https://t.me/SmmTegroTest_Bot?start=check_{LinkIdCheck}'
    await db.AddCheck(callback.from_user.id, Sum, CheckLink, LinkIdCheck, TypeCheck, ActivateQuantity)
    if TypeCheck == 'multi':
        TextResultCheck = 'üßæ<b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>\n' \
                          '\n' \
                          f'–°—É–º–º–∞ —á–µ–∫–∞: {Sum}\n' \
                          f'\n' \
                          f'<b>–í–Ω—É—Ç—Ä–∏ —á–µ–∫–∞: {ActivateQuantity} –∞–∫—Ç–∏–≤–∞—Ü–∏—è(–π) –ø–æ {Sum}—Ä—É–±–ª–µ–π</b>\n' \
                          f'\n' \
                          f'–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫:\n' \
                          f'<span class="tg-spoiler">{CheckLink}</span>'
    else:
        TextResultCheck = 'üßæ<b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n' \
                          '\n' \
                          f'<b>–°—É–º–º–∞ –ß–µ–∫–∞: {Sum}</b>\n' \
                          f'\n' \
                          f'<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫:</b>\n' \
                          f'<span class="tg-spoiler">{CheckLink}</span>'
    await callback.message.answer(TextResultCheck, reply_markup=await Button.ForPersonalUserResultCheck(LinkIdCheck),
                                  parse_mode=ParseMode.HTML)


@CheckRouter.callback_query(F.data.startswith('DeleteCheck_'))
async def DeleteCheck(callback: CallbackQuery):
    await callback.message.delete()
    CheckLink = str(callback.data[12:])
    await callback.message.answer('–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–µ–∫ ?', reply_markup=await Button.confirm_delete(CheckLink))


@CheckRouter.callback_query(F.data.startswith('confirm_delete_'))
async def confirm_delete_confirm_delete_(callback: CallbackQuery):
    await callback.message.delete()
    CheckLink = str(callback.data[15:])
    await callback.message.answer('–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', reply_markup=Button.ReplyStartKeyboard)
    Sum = await db.GetCheckForUser(None, None, CheckLink)
    Result = int(Sum[3]) * int(Sum[2])
    await db.DeleteCheck(None, None, CheckLink)
    await db.UpdateBalance(callback.from_user.id, Result)


@CheckRouter.callback_query(F.data == 'no_confirm_delete')
async def no_confirm_delete(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=Button.ReplyStartKeyboard)


@CheckRouter.callback_query(F.data == 'MyPersonalCheck')
async def MyPersonalCheck(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer('üßæ<b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n'
                                  '\n'
                                  '–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —á–µ–∫–æ–≤:',
                                  reply_markup=await Button.AllUserCheck(callback.from_user.id, 'personal'),
                                  parse_mode=ParseMode.HTML)


@CheckRouter.callback_query(F.data == 'BacToPersonalCheck')
async def BacToPersonalCheck(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await Check(callback.message)


@CheckRouter.callback_query(F.data.startswith('check_'))
async def CheckStartSwitch(callback: CallbackQuery, state: FSMContext):
    CheckId = int(callback.data[6:])
    await callback.message.delete()
    Info = await db.GetCheckForUser(None, CheckId)
    print(Info)
    if Info[7] == 'personal':
        await callback.message.answer('üßæ<b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>\n'
                                      '\n'
                                      f'–°—É–º–º–∞ —á–µ–∫–∞: {Info[2]}\n'
                                      f'\n'
                                      f'–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫:\n'
                                      f'<span class="tg-spoiler">{Info[4]}</span>',
                                      reply_markup=await Button.ForPersonalUserResultCheck(Info[5]),
                                      parse_mode=ParseMode.HTML)
    elif Info[7] == 'multi':
        await callback.message.answer('üßæ<b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>\n'
                                      '\n'
                                      f'–°—É–º–º–∞ —á–µ–∫–∞: {Info[2]}\n'
                                      f'\n'
                                      f'<b>–í–Ω—É—Ç—Ä–∏ —á–µ–∫–∞: {Info[3]} –∞–∫—Ç–∏–≤–∞—Ü–∏—è(–π) –ø–æ {Info[2]}—Ä—É–±–ª–µ–π</b>\n'
                                      f'\n'
                                      f'–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫:\n'
                                      f'<span class="tg-spoiler">{Info[4]}</span>',
                                      reply_markup=await Button.ForPersonalUserResultCheck(Info[5]),
                                      parse_mode=ParseMode.HTML)


@CheckRouter.callback_query(F.data == 'MultiCheck')
async def MultiCheck(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(TextUser.TextAddMultiCheck,
                                  reply_markup=await Button.GenerateCheckMulti(callback.from_user.id),
                                  parse_mode=ParseMode.HTML)


@CheckRouter.callback_query(F.data == 'GenerateCheckMulti')
async def GenerateCheckMulti(callback: CallbackQuery, state: FSMContext):
    Balance = await db.GetBalance(callback.from_user.id)
    TextGenerateCheck = 'üßæ<b>–ú—É–ª—å—Ç–∏-—á–µ–∫ —á–µ–∫</b>\n' \
                        '\n' \
                        '–°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –ø–æ–ª—É—á–∏—Ç –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π\n' \
                        '–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —ç—Ç–æ—Ç —á–µ–∫? \n' \
                        '\n' \
                        f'<b>–ú–∞–∫—Å–∏–º—É–º: {Balance[0]} –†–£–ë</b>\n' \
                        f'–ú–∏–Ω–∏–º—É–º: 0,1 –†–£–ë \n' \
                        f'\n' \
                        f'–ß–µ–º –±–æ–ª—å—à–µ —Å—É–º–º–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, —Ç–µ–º –±–æ–ª—å—à–µ –∫–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤\n' \
                        f'–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —É—Å–ª–æ–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ 1 –∫–∞–Ω–∞–ª—É –Ω–∞ –∫–∞–∂–¥—ã–µ 10 —Ä—É–±)\n' \
                        f'\n' \
                        f'<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞ –≤ —Ä—É–±–ª—è—Ö:</b>'
    await callback.message.delete()
    await callback.message.answer(TextGenerateCheck, reply_markup=await Button.check_multi_maxmin_keyboard(Balance[0]),
                                  parse_mode=ParseMode.HTML)
    await state.set_state(FSMFillFrom.GetPriceForMultiCheck)


@CheckRouter.callback_query(F.data.startswith('auto_check_multi_'))
async def ConfirmCheck(callback: CallbackQuery, state: FSMContext):
    global Sum, MaxQuantity
    Sum = str(callback.data[17:])
    Balance = await db.GetBalance(callback.from_user.id)
    MaxQuantity = int(int(Balance[0]) / float(Sum))
    TextForUserCreateCheck = "üßæ<b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>\n" \
                             "\n" \
                             "–°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–µ–∫?\n" \
                             "\n" \
                             f"<b>–û–¥–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è:</b> {Sum}\n" \
                             f"\n" \
                             f"–ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π —Å –≤–∞—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º: {MaxQuantity}\n" \
                             f"\n" \
                             f"<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b>"
    await callback.message.answer(TextForUserCreateCheck, reply_markup=Button.BackMainKeyboard,
                                  parse_mode=ParseMode.HTML)
    await state.set_state(FSMFillFrom.GetActivate)


@CheckRouter.message(FSMFillFrom.GetPriceForMultiCheck)
async def GetPriceForMultiCheck(message: Message, state: FSMContext):
    global Sum, MaxQuantity
    Balance = await db.GetBalance(message.from_user.id)
    Sum = message.text
    if int(Sum) >= 0.1:
        if Balance[0] >= int(Sum):
            Balance = await db.GetBalance(message.from_user.id)
            MaxQuantity = int(int(Balance[0]) / int(Sum))
            TextForUserCreateCheck = "üßæ<b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>\n" \
                                     "\n" \
                                     "–°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–µ–∫?\n" \
                                     "\n" \
                                     f"<b>–û–¥–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è:</b> {message.text}\n" \
                                     f"\n" \
                                     f"–ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π —Å –≤–∞—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º: {MaxQuantity}\n" \
                                     f"\n" \
                                     f"<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b>"
            await message.answer(TextForUserCreateCheck, reply_markup=Button.BackMainKeyboard,
                                 parse_mode=ParseMode.HTML)
            await state.set_state(FSMFillFrom.GetActivate)
        else:
            await message.answer('–°—É–º–º–∞ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –º–µ–Ω—å—à–µ —á–µ–º —Å—É–º–º–∞ —á–µ–∫–∞')
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —á–µ–∫–∞ –±–æ–ª—å—à–µ 10')


@CheckRouter.message(FSMFillFrom.GetActivate)
async def GetActivate(message: Message, state: FSMContext):
    global ActivateQuantity
    if int(message.text) <= MaxQuantity:
        ActivateQuantity = int(message.text)
        TextForMultiCheck = "üßæ<b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>\n" \
                            "\n" \
                            f"<b>–°—É–º–º–∞ —á–µ–∫–∞: {Sum}</b>\n" \
                            f"\n" \
                            f"<b>–í–Ω—É—Ç—Ä–∏ —á–µ–∫–∞:</b> {ActivateQuantity} –∞–∫—Ç–∏–≤–∞—Ü–∏—è(–π) –ø–æ {Sum} —Ä—É–±–ª–µ–π\n" \
                            f"\n" \
                            f"<b>üî∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:</b>"
        await message.answer(TextForMultiCheck, reply_markup=await Button.ConfirmCheck('multi'),
                             parse_mode=ParseMode.HTML)
    else:
        await message.answer('–í—ã —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ —Å –≤–∞—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º')


@CheckRouter.callback_query(F.data.startswith('Add_Subscribe_'))
async def AddSubscribe(call: CallbackQuery):
    global CheckId
    await call.message.delete()
    CheckId = int(call.data[14:])
    await call.message.answer('üßæ<b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>\n'
                              '\n'
                              '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏\n'
                              '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∏–∂–µ.\n'
                              '\n',
                              reply_markup=await Button.AddChannel(CheckId),
                              parse_mode=ParseMode.HTML)


@CheckRouter.callback_query(F.data.startswith('CheckChannel_'))
async def CheckChannel(call: CallbackQuery):
    await call.message.delete()
    checkid = int(call.data[13:])
    Check = await db.GetCheckForUser(None, None, checkid)
    global RealCheckId
    RealCheckId = Check[0]
    await call.message.answer('–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É –º—É–ª—å—Ç–∏-—á–µ–∫—É',
                              reply_markup=await Button.DeleteChannel(RealCheckId))


@CheckRouter.callback_query(F.data == 'MyMultiCheck')
async def MyPersonalCheck(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer('üßæ<b>–ú—É–ª—å—Ç–∏-—á–µ–∫–∏</b>\n'
                                  '\n'
                                  '–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –º—É–ª—å—Ç–∏-—á–µ–∫–æ–≤.\n'
                                  '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —á–µ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è.\n'
                                  '\n'
                                  '<b>–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –º—É–ª—å—Ç–∏—á–µ–∫–æ–≤:</b>',
                                  reply_markup=await Button.AllUserCheck(
                                      callback.from_user.id, 'multi'),
                                  parse_mode=ParseMode.HTML)


@CheckRouter.callback_query(F.data.startswith('Channel_'))
async def Channel(callback: CallbackQuery, state: FSMContext):
    global LinkCheckId
    LinkCheckId = int(callback.data[8:])
    print(CheckId)
    await callback.message.delete()
    await state.set_state(FSMFillFrom.GetChannel)
    await callback.message.answer('üßæ<b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>\n'
                                  '\n'
                                  '–ß—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤–∞—à –º—É–ª—å—Ç–∏-—á–µ–∫ –∫–∞–Ω–∞–ª–æ–º, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ \n'
                                  '—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.\n'
                                  '\n'
                                  '–Ø –ø—Ä–æ–≤–µ—Ä—é, –Ω—É–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ',
                                  reply_markup=Button.BackCheckKeyboard,
                                  parse_mode=ParseMode.HTML)


@CheckRouter.message(FSMFillFrom.GetChannel)
async def GetUrlChannel(message: Message, state: FSMContext, bot: Bot):
    Id = int(message.forward_from_chat.id)
    await message.delete()
    Check = await db.GetCheckForUser(None, None, LinkCheckId)
    print(LinkCheckId)
    global RealCheckId
    RealCheckId = Check[0]
    Chan = int(Check[2]) / 10
    Name = await bot.get_chat(Id)
    await db.AddChanel(Id, Name.title, Name.invite_link)
    await db.UpdateChannel(CheckId, Id)
    try:
        await message.answer('üßæ<b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>\n'
                             '\n'
                             '–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª \n'
                             '–ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ <b>–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ </b>\n'
                             '<b>—Å—É–º–º–æ–π –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n</b>'
                             '\n'
                             f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ {Chan} –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –≤–∞—à—É —Å—É–º–º—É —á–µ–∫–∞.\n',
                             reply_markup=await Button.DeleteChannel(RealCheckId),
                             parse_mode=ParseMode.HTML)
    except:
        await message.answer('üßæ<b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>\n'
                             '\n'
                             '–ß—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤–∞—à –º—É–ª—å—Ç–∏-—á–µ–∫ –∫–∞–Ω–∞–ª–æ–º, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ \n'
                             '—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.\n'
                             '\n'
                             '<b>–Ø –ø—Ä–æ–≤–µ—Ä—é, –Ω—É–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ</b>\n'
                             'üî∫ –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ \n'
                             '–ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å. –û–Ω–∏ –º–æ–≥—É—Ç\n'
                             '–≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É –±–æ—Ç–∞, –æ–Ω–∏ –µ–º—É –Ω–µ –Ω—É–∂–Ω—ã.',
                             parse_mode=ParseMode.HTML)


@CheckRouter.callback_query(F.data.startswith('PublicGroup_'))
async def PublicGroup(callback: CallbackQuery, state: FSMContext):
    global LinkCheckId
    LinkCheckId = int(callback.data[12:])
    await callback.message.delete()
    await callback.message.answer('üßæ<b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>\n'
                                  '\n'
                                  '–ß—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤–∞—à –º—É–ª—å—Ç–∏-—á–µ–∫ –ø—É–±–ª–∏—á–Ω–æ–π –≥—Ä—É–ø–ø–æ–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ \n'
                                  '–∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–µ.\n'
                                  '\n'
                                  '–ù–∞–ø—Ä–∏–º–µ—Ä https://t.me/SmmTegroTest_Bot',
                                  reply_markup=Button.BackCheckKeyboard,
                                  parse_mode=ParseMode.HTML)
    await state.set_state(FSMFillFrom.GetPublicGroup)


@CheckRouter.message(FSMFillFrom.GetPublicGroup)
async def GetPublicGroup(message: Message, state: FSMContext, bot: Bot):
    GroupName = '@' + str(message.text[13:])
    Chat_id = await bot.get_chat(GroupName)
    print(message.text)
    await db.AddChanel(Chat_id.id, Chat_id.title, message.text)
    await db.UpdateChannel(LinkCheckId, Chat_id.id)
    Check = await db.GetCheckForUser(None, None, CheckId)
    global RealCheckId
    RealCheckId = Check[0]
    Chan = int(Check[2]) / 10
    await message.answer('üßæ<b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>\n'
                         '\n'
                         '–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª \n'
                         '–ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ <b>–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ </b>\n'
                         '<b>—Å—É–º–º–æ–π –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n</b>'
                         '\n'
                         f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ {Chan} –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –≤–∞—à—É —Å—É–º–º—É —á–µ–∫–∞.\n',
                         reply_markup=await Button.DeleteChannel(RealCheckId),
                         parse_mode=ParseMode.HTML)


@CheckRouter.callback_query(F.data.startswith('PrivateGroup_'))
async def PrivateGroup(callback: CallbackQuery, state: FSMContext):
    global LinkCheckId
    LinkCheckId = int(callback.data[13:])
    await callback.message.delete()
    await callback.message.answer('üßæ<b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>\n'
                                  '\n'
                                  '–ß—Ç–æ –±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ —á–µ–∫—É –ø—Ä–∏–≤–∞—Ç–Ω—É—é \n'
                                  '–≥—Ä—É–ø–ø—É, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.\n'
                                  '\n'
                                  '–ï—Å–ª–∏ —ç—Ç–æ—Ç –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ \n'
                                  '–æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ–∫–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ \n'
                                  '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ.\n'
                                  '\n'
                                  '–ò –ø—Ä–∏—à–ª–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –±–æ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω'
                                  '–≤ –≤–∞—à —á–∞—Ç —Ç–æ –µ–≥–æ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏–≤ <b>+groupID</b> –≤ –≥—Ä—É–ø–ø–µ\n',
                                  reply_markup=Button.BackCheckKeyboard,
                                  parse_mode=ParseMode.HTML)
    await state.set_state(FSMFillFrom.GetPrivateGroup)


@CheckRouter.message(FSMFillFrom.GetPrivateGroup)
async def GetPrivateGroup(message: Message, state: FSMContext, bot: Bot):
    ChannelId = int(message.text)
    Chat_id = await bot.get_chat(ChannelId)
    await db.AddChanel(Chat_id.id, Chat_id.title, Chat_id.invite_link)
    await db.UpdateChannel(LinkCheckId, Chat_id.id)
    Check = await db.GetCheckForUser(None, None, CheckId)
    global RealCheckId
    RealCheckId = Check[0]
    Chan = int(int(Check[2]) / 10)
    await message.answer('üßæ<b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>\n'
                         '\n'
                         '–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª \n'
                         '–ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ <b>–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ </b>\n'
                         '<b>—Å—É–º–º–æ–π –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n</b>'
                         '\n'
                         f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ {Chan} –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –≤–∞—à—É —Å—É–º–º—É —á–µ–∫–∞.\n',
                         reply_markup=await Button.DeleteChannel(RealCheckId),
                         parse_mode=ParseMode.HTML)


@CheckRouter.message(F.text == '+groupID' and F.chat.type == 'group')
async def GetIdGroup(message: Message, bot: Bot):
    text = str(message.chat.id)
    await bot.send_message(message.chat.id, text)


@CheckRouter.callback_query(F.data.startswith('deletechannel_'))
async def DeleteChannel(callback: CallbackQuery, state: FSMContext):
    ChannelId = int(callback.data[14:])
    await callback.message.delete()
    await db.DeleteChannelFromCheck(RealCheckId, ChannelId)
    await callback.message.answer('–ö–∞–Ω–∞–ª –±—ã–ª —É–¥–∞–ª–µ–Ω', reply_markup=Button.BackCheckKeyboard)

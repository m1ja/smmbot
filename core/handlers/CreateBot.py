from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from core.config import config
from os import getenv
from typing import Any, Dict, Union
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery
import main
from core.keyboards import Button
from aiogram.filters import StateFilter
from aiogram.utils.token import TokenValidationError, validate_token
from aiogram.exceptions import TelegramUnauthorizedError
import database as db

NewBotRouter = Router()


class FSMFillFrom(StatesGroup):
    get_bot_token = State()


def is_bot_token(value: str) -> Union[bool, Dict[str, Any]]:
    try:
        validate_token(value)
    except TokenValidationError:
        return False
    return True


@NewBotRouter.message(F.text == 'ü§ñ–ú–æ–∏ –ë–æ—Ç—ã')
async def command_add_bot(message: Message, state: FSMContext, bot: Bot) -> Any:
    await state.clear()
    Text = '1Ô∏è‚É£–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ @BotFather. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –µ–≥–æ –∏–º—è, \n' \
           '–∞ –ø–æ—Ç–æ–º "Send Message", –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.\n' \
           '2Ô∏è‚É£–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —É –Ω–µ–≥–æ. –î–ª—è —ç—Ç–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ @BotFather\n' \
           '–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "newbot" (—Å–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç\n' \
           '–ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º; –ø–æ—Ç–æ–º –Ω—É–∂–Ω–æ\n' \
           '–ø—Ä–∏–¥—É–º–∞—Ç—å –≤–∞—à—É —Å—Å—ã–ª–∫—É, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏\n' \
           '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ "bot", –Ω–∞–ø—Ä–∏–º–µ—Ä "NewsBot").\n' \
           '3Ô∏è‚É£–°–∫–æ–ø–∏—Ä—É–π—Ç–µ API —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –≤—ã–¥–∞—Å—Ç @BotFather\n' \
           '4Ô∏è‚É£–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –æ–±—Ä–∞—Ç–Ω–æ –≤ @SmmTegroTest_Bot –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API —Ç–æ–∫–µ–Ω'
    await message.answer(Text, reply_markup=Button.BotsKeyboard)


@NewBotRouter.callback_query(F.data == 'CreateBot')
async def CreateBot(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await callback.message.delete()
    TextCreate = '1Ô∏è‚É£–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ @BotFather. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –µ–≥–æ –∏–º—è, \n' \
                 '–∞ –ø–æ—Ç–æ–º "Send Message", –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.\n' \
                 '2Ô∏è‚É£–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —É –Ω–µ–≥–æ. –î–ª—è —ç—Ç–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ @BotFather\n' \
                 '–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "newbot" (—Å–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç\n' \
                 '–ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º; –ø–æ—Ç–æ–º –Ω—É–∂–Ω–æ\n' \
                 '–ø—Ä–∏–¥—É–º–∞—Ç—å –≤–∞—à—É —Å—Å—ã–ª–∫—É, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏\n' \
                 '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ "bot", –Ω–∞–ø—Ä–∏–º–µ—Ä "NewsBot").\n' \
                 '3Ô∏è‚É£–°–∫–æ–ø–∏—Ä—É–π—Ç–µ API —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –≤—ã–¥–∞—Å—Ç @BotFather\n' \
                 '4Ô∏è‚É£–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –æ–±—Ä–∞—Ç–Ω–æ –≤ @SmmTegroTest_Bot –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API —Ç–æ–∫–µ–Ω'
    await callback.message.answer(TextCreate)
    await state.set_state(FSMFillFrom.get_bot_token)


@NewBotRouter.message(StateFilter(FSMFillFrom.get_bot_token))
async def get_product(message: Message, state: FSMContext, bot: Bot):
    if is_bot_token(message.text):
        new_bot = Bot(token=message.text, session=bot.session)
        if not await db.AddBots(message.text, message.from_user.id):
            await message.answer('–¢–∞–∫–æ–π –±–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=Button.ReplyStartKeyboard)
        else:
            try:
                bot_user = await new_bot.get_me()
            except TelegramUnauthorizedError:
                await message.answer("–¢–æ–∫–µ–Ω –≤–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=Button.ReplyStartKeyboard)
            await new_bot.delete_webhook(drop_pending_updates=True)
            await new_bot.set_webhook(main.OTHER_BOTS_URL.format(bot_token=message.text))
            await state.clear()
            await message.answer(f"–ë–æ—Ç @{bot_user.username} –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", reply_markup=Button.ReplyStartKeyboard)
    else:
        await message.answer('–≠—Ç–æ –Ω–µ —Ç–æ–∫–µ–Ω', reply_markup=Button.ReplyStartKeyboard)


@NewBotRouter.callback_query(F.data.startswith('con_delete_bot_'))
async def delete_bot(call: CallbackQuery, bot: Bot):
    await call.message.delete()
    DeleteBotApi = str(call.data[15:])
    await call.message.answer('–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ—Ç ?', reply_markup=await Button.confirm_bot(DeleteBotApi))


@NewBotRouter.callback_query(F.data.startswith('delete_bot_'))
async def delete_bot(call: CallbackQuery, bot: Bot):
    DeleteBotApi = str(call.data[11:])
    await db.DeleteBot(DeleteBotApi)
    await call.message.delete()
    new_bot = Bot(token=DeleteBotApi, session=bot.session)
    try:
        bot_user = await new_bot.get_me()
    except TelegramUnauthorizedError:
        return call.message.answer("–¢–æ–∫–µ–Ω –≤–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    await new_bot.delete_webhook(drop_pending_updates=True)
    return await call.message.answer(f"–ë–æ—Ç @{bot_user.username} —É–¥–∞–ª–µ–Ω")


@NewBotRouter.callback_query(F.data == 'MyBot')
async def DeleteBot(call: CallbackQuery, bot: Bot, state: FSMContext):
    await call.message.delete()
    res = await Button.DeleteBot(call.from_user.id)
    await call.message.answer(res[0], reply_markup=res[1])


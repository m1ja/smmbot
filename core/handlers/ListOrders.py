from aiogram.filters.command import Command
from aiogram.types import Message, CallbackQuery
from aiogram import F
from core.keyboards import Button
import database as db
import requests
import json
from aiogram import Bot, Router

ListOrders = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
MinOrdersList = 0
MaxOrdersList = 12


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –º–æ–∏ –∑–∞–∫–∞–∑—ã
@ListOrders.message(Command('myorder'))
async def MyOrderCommand(callback: CallbackQuery, bot: Bot):
    await MyOrder(callback, bot)


@ListOrders.callback_query(F.data == 'history_order')
async def MyOrder(callback: CallbackQuery, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    OrderList = await db.GetOrders(callback.from_user.id)
    text = ''
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ø–∏—Å–æ–∫ –±–æ–ª—å—à–µ 0
    if len(OrderList) > 0:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∏ –Ω–µ –ø–æ–º–µ—Å—Ç—è—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(OrderList) < 13:
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
            for order in OrderList:
                NameProduct = await db.GetProductName(order[2])
                Status = order[9]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                print(Status)
                if Status == 'Pending':
                    text += f'üÜï–í –æ–∂–∏–¥–∞–Ω–∏–∏ {NameProduct} {order[4]}—à—Ç {order[5]}RUB\n'
                elif Status == 'In progress' or Status == '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è':
                    text += f'üîÑ–í —Ä–∞–±–æ—Ç–µ {NameProduct} {order[4]}—à—Ç {order[5]}RUB\n'
                elif Status == 'Processing':
                    text += f'‚ûï–û–±—Ä–∞–±–æ—Ç–∫–∞ {NameProduct} {order[4]}—à—Ç {order[5]}RUB\n'
                elif Status == 'Completed' or Status == '–ó–∞–≤–µ—Ä—à–µ–Ω':
                    text += f'‚òëÔ∏è–í—ã–ø–æ–ª–Ω–µ–Ω {NameProduct} {order[4]}—à—Ç {order[5]}RUB\n'
                elif Status == 'success':
                    text += f'üÜï–ù–æ–≤—ã–π {NameProduct} {order[4]}—à—Ç {order[5]}RUB\n'
                elif Status == 'Partial':
                    text += f'‚òëÔ∏è–í—ã–ø–æ–ª–Ω–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ {NameProduct} {order[4]}—à—Ç {order[5]}RUB\n'
                elif Status == 'Canceled' or Status == '–û—Ç–º–µ–Ω–µ–Ω':
                    if await db.GetRefundStatus(order[0]) != 1:
                        await db.Refund(order[0])
                        await db.UpdateBalance(callback.from_user.id, order[5])
                        await db.Add_History(callback.from_user.id, order[5], '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞')
                        Referrals = await db.GetReferral(callback.from_user.id)
                        if Referrals is not None:
                            SecondLevelReferral = await db.GetReferral(Referrals)
                            if SecondLevelReferral is not None:
                                ReferralSum = order[5] * 0.04
                                await db.WriteOffTheReferral(SecondLevelReferral, ReferralSum)
                                await db.WriteOffTheBalance(SecondLevelReferral, ReferralSum)
                                await db.Add_History(SecondLevelReferral, -ReferralSum, '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ —Ä–µ—Ñ')
                            ReferralSum = order[5] * 0.12
                            await db.WriteOffTheReferral(Referrals, ReferralSum)
                            await db.WriteOffTheBalance(Referrals, ReferralSum)
                            await db.Add_History(Referrals, -ReferralSum, '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ —Ä–µ—Ñ')
                    text += f'‚ùå–û—Ç–º–µ–Ω–µ–Ω {NameProduct} {order[4]}—à—Ç {order[5]}RUB\n'
            await callback.message.answer(text)
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—ã –Ω–µ –ø–æ–º–µ—Å—Ç—è—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        else:
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            Status = ''
            for a in range(MinOrdersList, MaxOrdersList):
                if a < len(OrderList):
                    NameProduct = await db.GetProductName(OrderList[a][2])
                    Service = await db.GetServiceCategory(NameProduct[1])
                    Status = OrderList[a][9]
                    if Status == 'Pending':
                        text += f'üÜï–í –æ–∂–∏–¥–∞–Ω–∏–∏ {NameProduct[0]} {OrderList[a][4]}—à—Ç {OrderList[a][5]}RUB\n'
                    elif Status == 'In progress' or Status == '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è':
                        text += f'üîÑ–í —Ä–∞–±–æ—Ç–µ {NameProduct[0]} {OrderList[a][4]}—à—Ç {OrderList[a][5]}RUB\n'
                    elif Status == 'Processing':
                        text += f'‚ûï–û–±—Ä–∞–±–æ—Ç–∫–∞ {NameProduct[0]} {OrderList[a][4]}—à—Ç {OrderList[a][5]}RUB\n'
                    elif Status == 'Completed' or Status == '–ó–∞–≤–µ—Ä—à–µ–Ω':
                        text += f'‚úÖ–í—ã–ø–æ–ª–Ω–µ–Ω {NameProduct[0]} {OrderList[a][4]}—à—Ç {OrderList[a][5]}RUB\n'
                    elif Status == 'success':
                        text += f'üÜï–ù–æ–≤—ã–π {NameProduct[0]} {OrderList[a][4]}—à—Ç {OrderList[a][5]}RUB\n'
                    elif Status == 'Partial':
                        text += f'‚òëÔ∏è–í—ã–ø–æ–ª–Ω–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ {NameProduct[0]} {OrderList[a][4]}—à—Ç {OrderList[a][5]}RUB\n'
                    elif Status == '–ù–µ –æ–ø–ª–∞—á–µ–Ω':
                        text += f'‚ùå–ù–µ –æ–ø–ª–∞—á–µ–Ω {NameProduct[0]} {OrderList[a][4]}—à—Ç {OrderList[a][5]}RUB\n'
                    elif Status == 'Canceled' or Status == '–û—Ç–º–µ–Ω–µ–Ω':
                        if await db.GetRefundStatus(OrderList[a][0]) != 1:
                            await db.Refund(OrderList[a][0])
                            await db.UpdateBalance(callback.from_user.id, OrderList[a][5])
                            await db.Add_History(callback.from_user.id, OrderList[a][5], '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞')
                            Referrals = await db.GetReferral(callback.from_user.id)
                            if Referrals is not None:
                                SecondLevelReferral = await db.GetReferral(Referrals)
                                if SecondLevelReferral is not None:
                                    ReferralSum = OrderList[a][5] * 0.04
                                    await db.WriteOffTheReferral(SecondLevelReferral, ReferralSum)
                                    await db.WriteOffTheBalance(SecondLevelReferral, ReferralSum)
                                    await db.Add_History(SecondLevelReferral, -ReferralSum, '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ —Ä–µ—Ñ')
                                ReferralSum = OrderList[a][5] * 0.12
                                await db.WriteOffTheReferral(Referrals, ReferralSum)
                                await db.WriteOffTheBalance(Referrals, ReferralSum)
                                await db.Add_History(Referrals, -ReferralSum, '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ —Ä–µ—Ñ')
                        text += f'‚ùå–û—Ç–º–µ–Ω–µ–Ω {NameProduct[0]} {OrderList[a][4]}—à—Ç {OrderList[a][5]}RUB\n'
            # –î–µ–ª–∞–µ–º –∑–∞—â–∏—Ç—É –≤ –º–µ–Ω—å—à—É—é –∏ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
            if MinOrdersList >= 0:
                if MaxOrdersList < 13:
                    await bot.send_message(callback.from_user.id, text, reply_markup=Button.OnlyNextOrdersList)
                elif len(OrderList) > MaxOrdersList > 12:
                    await bot.send_message(callback.from_user.id, text, reply_markup=Button.NextOrdersList)
                else:
                    await bot.send_message(callback.from_user.id, text, reply_markup=Button.BackOrdersList)
    # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã–≤–æ–¥–∏–º —á—Ç–æ –Ω–µ –∑–∞–∫–∞–∑–æ–≤
    else:
        await callback.message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤')


# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥ —Å–ª–∞–π–¥
@ListOrders.callback_query(F.data == 'NextOrdersList')
async def NoSubCategory(callback: CallbackQuery, bot: Bot):
    global MinOrdersList, MaxOrdersList
    MinOrdersList += 12
    MaxOrdersList += 12
    await callback.message.delete()
    await MyOrder(callback, bot)


# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø—Ä–æ—à–ª—ã–π —Å–ª–∞–π–¥
@ListOrders.callback_query(F.data == 'BackOrderList')
async def NoSubCategory(callback: CallbackQuery, bot: Bot):
    global MinOrdersList, MaxOrdersList
    MinOrdersList -= 12
    MaxOrdersList -= 12
    await callback.message.delete()
    await MyOrder(callback, bot)

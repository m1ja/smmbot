# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
import os
from aiogram import F
from urllib.parse import urlencode
from aiogram.filters import StateFilter
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command
from aiogram.types import Message, CallbackQuery
from core.keyboards import Button
from core.config import config
import database as db
import validators
import requests
import json
import time
import hmac
from core.handlers import Balance
import hashlib
import uuid
from aiogram import Bot, Router
from aiocryptopay import AioCryptoPay, Networks


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞
ProductId = 0
PriceProduct = 0
Quantity = 0.0
sum = 0.0
order_id = ''
Service = ''
crypto = AioCryptoPay(token='14148:AA9QPgvYz9GQD5osr02NNKTJBRkU4VbkFNv', network=Networks.MAIN_NET)

OrderRouter = Router()


# –°–æ–∑–¥–∞–µ–º FSM
class FSMFillFrom(StatesGroup):
    get_product = State()
    get_url = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
@OrderRouter.message(Command('neworder'))
async def CreateAnOrderKeyboard(message: Message):
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
    await CreateAnOrder(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
@OrderRouter.message(F.text == 'üî•–ù–æ–≤—ã–π –∑–∞–∫–∞–∑')
async def CreateAnOrder(message: Message):
    # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É:',
                         reply_markup=await Button.CategoryMarkup('buy'))


# –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
@OrderRouter.callback_query(F.data.startswith("buy_category"))
async def NameCategory(callback: CallbackQuery):
    global Service
    # –ü–æ–ª—É—á–∞–µ–º id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
    ParentId = int(callback.data[13:])
    # –í—ã–≤–æ–¥ –≤—Å–µ —Ç–æ–≤–∞—Ä–∞ —É –∫–æ–≥–æ id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–≤–µ–Ω —ç—Ç–æ–π
    Service = await db.GetServiceCategory(ParentId)
    print(Service)
    SubCategroy = await db.GetSubCategory(ParentId)
    if SubCategroy is None:
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=await Button.CheckProduct('buy', ParentId))
    else:
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=await Button.SubCategory('buy', ParentId))
    await callback.message.delete()


@OrderRouter.callback_query(F.data.startswith("buy_subcategory"))
async def buy_subcategory(callback: CallbackQuery):
    global Service
    ParentId = int(callback.data[16:])
    Service = await db.GetServiceCategory(ParentId)
    print(Service)
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=await Button.CheckProduct('buy', ParentId))
    await callback.message.delete()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@OrderRouter.callback_query(F.data.startswith('buy_product'))
async def buy_product(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    global ProductId
    global PriceProduct
    global Quantity
    # –ü–æ–ª—É—á–∞–µ–º id —Ç–æ–≤–∞—Ä–∞ –∏–∑ –±–¥
    ProductId = int(callback.data[12:])
    InfoProduct = await db.GetOneProduct(ProductId)
    PriceProduct = InfoProduct[5]
    Quantity = InfoProduct[3]
    # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
    text = f'üë¥–ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏ "{InfoProduct[2]}"\n' \
           f'üí≥ –¶–µ–Ω–∞ - {InfoProduct[5]}. –ó–∞ –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É (–ü–æ–¥–ø–∏—Å—á–∏–∫, –ª–∞–π–∫, —Ä–µ–ø–æ—Å—Ç)' \
           f'üëá –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ –æ—Ç {InfoProduct[3]} –¥–æ {InfoProduct[4]}'
    await callback.message.answer(text, reply_markup=Button.BackMainKeyboard)
    await state.set_state(FSMFillFrom.get_url)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
@OrderRouter.message(F.text == '–ù–∞–∑–∞–¥')
async def CheckPay(message: Message, state: FSMContext):
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM
    await state.clear()
    await message.delete()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer('–í—ã –ø–æ–ø–∞–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=Button.ReplyAdminMainKeyboard)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞c —Ä–∞–∑–¥–µ–ª:', reply_markup=Button.ReplyStartKeyboard)


# –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
@OrderRouter.message(StateFilter(FSMFillFrom.get_url))
async def get_product(message: Message, state: FSMContext):
    global Quantity
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
    if message.text.isdigit() is True:
        # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª –≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        if int(message.text) < Quantity:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ')
        else:
            Quantity = float(message.text)
            await state.set_state(FSMFillFrom.get_product)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', reply_markup=Button.BackMainKeyboard)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ !!!!!')


# –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑–∞ –≤ SMMPanel
@OrderRouter.message(StateFilter(FSMFillFrom.get_product))
async def get_product(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Å—ã–ª–∫–æ–π
    if validators.url(message.text) is True:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ SMMPanel –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        UserId = message.from_user.id
        ServiceId = await db.GetProductServiceId(ProductId)
        balance = await db.GetBalance(message.from_user.id)
        Sum = Quantity * PriceProduct
        # –ï—Å–ª–∏ —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –±–æ–ª—å—à–µ —á–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if float(Sum) > float(balance[0]):
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã Tegro
            global order_id, sum
            sum = Sum
            res_sum = sum - balance[0]
            order_id = uuid.uuid4()
            data = {
                'shop_id': str(os.getenv('SHOPID')),
                'amount': res_sum,
                'currency': 'RUB',
                'order_id': order_id,
            }
            sorted_data = sorted(data.items())
            data_string = urlencode(sorted_data)
            sign = hashlib.md5((data_string + str(os.getenv('SECRETKEY'))).encode()).hexdigest()
            PayUrl = f'https://tegro.money/pay/?{data_string}&receipt[items][0][name]=Replenish&receipt[items][0][count]=1&receipt[items][0][price]={res_sum}&sign={sign}'

            sum_ton = Sum / config.TON
            invoice = await crypto.create_invoice(asset='TON', amount=sum_ton)

            await message.answer(f'–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É: {res_sum}',
                                 reply_markup=await Button.TegroPay(PayUrl, invoice.pay_url))
        else:
            # –ï—Å–ª–∏ –¥–µ–Ω–µ–≥ —Ö–≤–∞—Ç–∞–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ SMMPanel
            await db.WriteOffTheBalance(UserId, Sum)
            Sum_History = -Sum
            await db.Add_History(UserId, Sum_History, '–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏')
            Referrals = await db.GetReferral(UserId)
            if Referrals is not None:
                SecondLevelReferral = await db.GetReferral(Referrals)
                if SecondLevelReferral is not None:
                    ReferralSum = Sum * 0.04
                    await db.UpdateMoneyReferral(SecondLevelReferral, ReferralSum)
                    await db.UpdateBalance(SecondLevelReferral, ReferralSum)
                    await db.Add_History(SecondLevelReferral, ReferralSum, '–†–µ—Ñ –ø—Ä–æ–≥—Ä–∞–º–º–∞')
                ReferralSum = Sum * 0.12
                await db.UpdateMoneyReferral(Referrals, ReferralSum)
                await db.UpdateBalance(Referrals, ReferralSum)
                await db.Add_History(Referrals, ReferralSum, '–†–µ—Ñ –ø—Ä–æ–≥—Ä–∞–º–º–∞')
            Url = message.text
            if Service == 'SmmPanel':
                res = await OrderSmmPanel(Url, ServiceId, UserId, Sum)
                await message.answer(res)
            elif Service == 'SmoService':
                res = await OrderSmoService(Url, ServiceId, UserId, Sum)
                await message.answer(res)
        await state.clear()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Å—Å—ã–ª–∫—É
    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–ø–∏—Å–∞–Ω–∏–µ:\n'
                             'URL –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ\n'
                             '\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ\n')



async def OrderSmmPanel(Url, ServiceId, UserId, Sum):
    key_smm = os.getenv('KEYSMMPANEL')
    url = 'https://smmpanel.ru/api/v1'
    data = {
        'key': key_smm,
        'action': 'add',
        'service': ServiceId,
        'link': Url,
        'quantity': Quantity
    }
    response = requests.post(url, data=data)
    OrderData = json.loads(response.text)
    Status = (OrderData['status'])
    Order_Id = (OrderData['order'])
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–¥ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
    res = await db.AddOrders(UserId, ProductId, Quantity, Sum, ServiceId[0], Url, Order_Id, Status)
    text = f'–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä {Order_Id} –ø–æ–ª—É—á–µ–Ω.\n' \
           f'–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'
    return text


async def OrderSmoService(Url, ServiceId, UserId, Sum):
    user_id_smo = os.getenv('USERIDSMOSERVICE')
    key_smo = os.getenv('KEYSMOSERVICE')
    url = 'https://smoservice.media/api/'
    data = {
        'user_id': user_id_smo,
        'api_key': key_smo,
        'action': 'create_order',
        'service_id': ServiceId[0],
        'count': Quantity,
        'url': Url,
    }
    response = requests.post(url, data=data)
    OrderData = json.loads(response.text)
    Status = (OrderData['type'])
    Order_Id = (OrderData['data']['order_id'])
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–¥ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
    res = await db.AddOrders(UserId, ProductId, Quantity, Sum, ServiceId[0], Url, Order_Id, Status)
    text = f'–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä {Order_Id} –ø–æ–ª—É—á–µ–Ω.\n' \
           f'–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'
    return text

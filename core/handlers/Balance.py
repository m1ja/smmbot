# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞
import os
from aiogram.filters import StateFilter
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command
from aiogram.types import Message, CallbackQuery
from aiogram import F
from core.keyboards import Button
from core.config import config
from http.server import BaseHTTPRequestHandler
import database as db
from urllib.parse import urlencode
import uuid
import requests
import json
import time
import hmac
import hashlib
import datetime
import jinja2
from aiogram import Bot, Router
from aiogram.types.input_file import FSInputFile
from aiocryptopay import AioCryptoPay, Networks
from aiocryptopay.models.update import Update
from walletpay import Client

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
global invoice
Sum = 0.0
order_id = ''
user_id = 0
crypto = AioCryptoPay(token='14148:AA9QPgvYz9GQD5osr02NNKTJBRkU4VbkFNv', network=Networks.MAIN_NET)


BalanceRouter = Router()

# –°–æ–∑–¥–∞–µ–º FSM
class FSMFillFrom(StatesGroup):
    ReplenishBalance = State()
    GetPay = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
@BalanceRouter.message(Command('mybalance'))
async def MyBalanceKeyboard(message: Message, state: FSMContext):
    # –í—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏
    await MyBalance(message, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ú–æ–π –ë–∞–ª–∞–Ω—Å
@BalanceRouter.message(F.text == 'üëõ –ö–æ—à–µ–ª—ë–∫')
async def MyBalance(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –±–¥ —Å –ø–æ–º–æ—â—å—é id
    balance = await db.GetBalance(message.from_user.id)
    text = f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance[0]} —Ä—É–±.\n' \
           'üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:'
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSM
    await message.answer(text, reply_markup=Button.BalanceKeyboard)
    await state.set_state(FSMFillFrom.ReplenishBalance)


@BalanceRouter.callback_query(F.data == 'replenish_balance')
async def replenish_balance(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer('üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∏–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ', reply_markup=Button.BalanceSumKeyboard)
    await state.set_state(FSMFillFrom.ReplenishBalance)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ FSM –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@BalanceRouter.callback_query(F.data.startswith('SumReplenish_'))
async def ReplenishBalance(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    global Sum, order_id, user_id, invoice
    Info = await bot.get_me()
    Sum = int(call.data[13:])
    user_id = call.from_user.id
    Shopped = str(os.getenv('SHOPID'))
    SecretKey = str(os.getenv('SECRETKEY'))
    order_id = uuid.uuid4()
    data = {
        'shop_id': Shopped,
        'amount': Sum,
        'currency': 'RUB',
        'order_id': order_id,
    }
    sorted_data = sorted(data.items())
    data_string = urlencode(sorted_data)
    sign = hashlib.md5((data_string + SecretKey).encode()).hexdigest()
    PayUrl = f'https://tegro.money/pay/?{data_string}&receipt[items][0][name]=Replenish&receipt[items][0][count]=1&receipt[items][0][price]={Sum}&sign={sign}'

    sum_ton = Sum / config.TON
    invoice = await crypto.create_invoice(asset='TON', amount=sum_ton)

    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup=await Button.TegroPay(PayUrl, invoice.pay_url))
    await call.message.delete()


@BalanceRouter.message(StateFilter(FSMFillFrom.ReplenishBalance))
async def ReplenishBalance(message: Message, state: FSMContext, bot: Bot):
    global Sum, order_id, user_id, invoice
    Info = await bot.get_me()
    if message.text.isdigit() is True:
        Sum = float(message.text)
        user_id = message.from_user.id
        Shopped = str(os.getenv('SHOPID'))
        SecretKey = str(os.getenv('SECRETKEY'))
        order_id = uuid.uuid4()
        data = {
            'amount': int(Sum),
            'currency': 'RUB',
            'order_id': order_id,
            'shop_id': Shopped,
        }
        sorted_data = sorted(data.items())
        data_sign = urlencode(sorted_data)
        print(data_sign)
        sign = hashlib.md5((data_sign + SecretKey).encode()).hexdigest()
        PayUrl = f'https://tegro.money/pay/?{data_sign}&receipt[items][0][name]=Replenish&receipt[items][0][count]=1&receipt[items][0][price]={Sum}&sign={sign}'
        print(PayUrl)


        sum_ton = Sum/config.TON
        invoice = await crypto.create_invoice(asset='TON', amount=sum_ton)


        headers = {
            'Wpay-Store-Api-Key': '3Qkdyg4P12UuGXTBc199kEd21o8mv3KxNt4A',
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        }

        payload = {
            'amount': {
                'amount': Sum,
                'currencyCode': 'RUB',  # –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Å—á–µ—Ç –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê
            },
            'description': 'Goods and service.',
            'externalId': f'{order_id}',  # ID —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ –≤–∞—à–µ–º –±–æ—Ç–µ
            'timeoutSeconds': 60 * 60 * 24,  # –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—á–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            'customerTelegramUserId': f'{message.from_user.id}',  # ID –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            'returnUrl': f'https://t.me/{Info.username}',  # –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –Ω–∞—à –±–æ—Ç
            'failReturnUrl': 'https://t.me/wallet',  # –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–ø–ª–∞—Ç—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ @wallet
        }

        response = requests.post(
            "https://pay.wallet.tg/wpay/store-api/v1/order",
            json=payload, headers=headers, timeout=10
        )
        data = response.json()

        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup=await Button.TegroPay(PayUrl, invoice.pay_url))
    else:
        await state.clear()


@BalanceRouter.callback_query(F.data == 'history_balance')
async def history_balance(callback: CallbackQuery, state: FSMContext):
    Datas = await db.Get_History(callback.from_user.id)
    TextAnswer = ''
    date = ''
    Id = 0
    if Datas:
        for data in Datas:
            if data[0] > Id:
                Id = data[0]
                date = data[4]
                month = data[4].split('-')
                TextAnswer = f'<b>‚Ä¢ {month[2]}.{month[1]}.{month[0]}</b>\n'
        for data in Datas:
            if data[4] == date:
                Time = data[5].split(':')
                if data[2] > 0:
                    TextAnswer += f'<i>{Time[0]}:{Time[1]} {data[3]} +{data[2]} —Ä—É–±–ª–µ–π</i>\n'
                else:
                    TextAnswer += f'<i>{Time[0]}:{Time[1]} {data[3]} {data[2]} —Ä—É–±–ª–µ–π</i>\n'
        await callback.message.answer(TextAnswer, reply_markup=Button.GetAllHistoryKeyboard)
        await callback.message.delete()
    else:
        TextAnswer = '–£ –≤–∞—Å –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ —Å—á–µ—Ç—É'
        await callback.answer(TextAnswer)


@BalanceRouter.callback_query(F.data == 'Get_All_History')
async def Get_All_History(callback: CallbackQuery, state: FSMContext, bot: Bot):
    Datas = await db.Get_History(callback.from_user.id)
    file = open(f"–æ—Ç—á–µ—Ç_{callback.from_user.id}.txt", "w+")
    date = ''
    for data in Datas:
        if date != data[4]:
            date = data[4]
            day = date.split('-')[2]
            month = date.split('-')[1]
            year = date.split('-')[0]
            file.write(f"{day}.{month}.{year}\n")
        hour = data[5].split(':')[0]
        minute = data[5].split(':')[1]
        file.write(f"{hour}:{minute} {data[3]} {data[2]} —Ä—É–±–ª–µ–π\n")
    file.close()
    document = FSInputFile(f'–æ—Ç—á–µ—Ç_{callback.from_user.id}.txt')
    await bot.send_document(callback.from_user.id, document)
    await callback.message.delete()


async def tegro_success(request):
    param2 = request.query.get('status')
    bot = Bot(token=os.getenv('TOKEN'))
    if param2 == 'success':
        await db.UpdateBalance(user_id, Sum)
        await bot.send_message(chat_id=user_id, text='–æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', reply_markup=Button.ReplyStartKeyboard)
        await db.Add_History(user_id, Sum, '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')


async def tegro_fail(request):
    bot = Bot(token=os.getenv('TOKEN'))
    await bot.send_message(user_id, '–æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞', reply_markup=Button.ReplyStartKeyboard)


@crypto.pay_handler()
async def invoice_paid(update: Update, app) -> None:
    bot = Bot(token=os.getenv('TOKEN'))
    if update.payload.status == 'paid':
        await db.UpdateBalance(user_id, Sum)
        await bot.send_message(chat_id=user_id, text='–æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', reply_markup=Button.ReplyStartKeyboard)
        await db.Add_History(user_id, Sum, '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')


async def ton_wallet_success(request):
    bot = Bot(token=os.getenv('TOKEN'))
    for event in request.get_json():
        if event["type"] == "ORDER_PAID":
            data = event["payload"]
            print("–û–ø–ª–∞—á–µ–Ω —Å—á–µ—Ç N {} –Ω–∞ —Å—É–º–º—É {} {}. –û–ø–ª–∞—Ç–∞ {} {}.".format(
                data["externalId"],  # ID —Å—á–µ—Ç–∞ –≤ –≤–∞—à–µ–º –±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –º—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
                data["orderAmount"]["amount"],  # –°—É–º–º–∞ —Å—á–µ—Ç–∞, —É–∫–∞–∑–∞–Ω–Ω–∞—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
                data["orderAmount"]["currencyCode"],  # –í–∞–ª—é—Ç–∞ —Å—á–µ—Ç–∞
                data["selectedPaymentOption"]["amount"]["amount"],  # –°–∫–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
                data["selectedPaymentOption"]["amount"]["currencyCode"]  # –í –∫–∞–∫–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
            ))
            await db.UpdateBalance(user_id, Sum)
            await bot.send_message(chat_id=user_id, text='–æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
                                   reply_markup=Button.ReplyStartKeyboard)
            await db.Add_History(user_id, Sum, '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')
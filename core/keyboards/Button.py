from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import database as db
from core.config import config
from aiogram import Bot, Dispatcher, F, Router

StartKeyboard = [
    [
        KeyboardButton(text='üî•–ù–æ–≤—ã–π –∑–∞–∫–∞–∑'),
    ],
    [
        KeyboardButton(text='üëõ –ö–æ—à–µ–ª—ë–∫'),
        KeyboardButton(text=' üí∞ –†–µ—Ñ–µ—Ä–∞–ª—ã '),
    ],
    [
        KeyboardButton(text='ü¶ã –ß–µ–∫–∏'),
        KeyboardButton(text='ü§ñ–ú–æ–∏ –ë–æ—Ç—ã'),
    ]
]
ReplyStartKeyboard = ReplyKeyboardMarkup(keyboard=StartKeyboard, resize_keyboard=True)


AdminMainKeyboard = [
    [
        KeyboardButton(text='üî•–ù–æ–≤—ã–π –∑–∞–∫–∞–∑'),
    ],
    [
        KeyboardButton(text='üëõ –ö–æ—à–µ–ª—ë–∫'),
        KeyboardButton(text='üí∞ –†–µ—Ñ–µ—Ä–∞–ª—ã'),
    ],
    [
        KeyboardButton(text='ü¶ã –ß–µ–∫–∏'),
        KeyboardButton(text='ü§ñ–ú–æ–∏ –ë–æ—Ç—ã'),
    ],
    [
        KeyboardButton(text='–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'),
    ]
]
ReplyAdminMainKeyboard = ReplyKeyboardMarkup(keyboard=AdminMainKeyboard, resize_keyboard=True)


AdminPanelKeyboard = [
    [
        KeyboardButton(text='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    ],
    [
        KeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥'),
    ],
    [
        KeyboardButton(text='–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å—ã'),
    ],
    [
        KeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞')
    ],
    #[
        #KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π')
    #],
    [
        KeyboardButton(text='–í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞')
    ]
]
ReplyAdminPanelKeyboard = ReplyKeyboardMarkup(keyboard=AdminPanelKeyboard, resize_keyboard=True)


BackMainButton = [
    [
        KeyboardButton(text='–ù–∞–∑–∞–¥')
    ]
]
BackMainKeyboard = ReplyKeyboardMarkup(keyboard=BackMainButton, resize_keyboard=True)


GetService = [
    [
        InlineKeyboardButton(text='–í–º–µ—Å—Ç–µ', callback_data='All_service')
    ],
    [
        InlineKeyboardButton(text='SmmPanel', callback_data='SmmPanelService')
    ],
    [
        InlineKeyboardButton(text='SmoService', callback_data='SmoService')
    ]
]
GetServiceKeyboard = InlineKeyboardMarkup(inline_keyboard=GetService)


AddOrRemoveCategoryButton = [
    [
        InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å', callback_data='AddCategory')
    ],
    [
        InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='RemoveCategorySubCategory')
    ],
    [
        InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='BackToMainMenuAdmin')
    ]
]
AddOrRemoveCategoryKeyboard = InlineKeyboardMarkup(inline_keyboard=AddOrRemoveCategoryButton)


RemoveCategoryOrSubCategoryButton = [
    [
        InlineKeyboardButton(text='—É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='RemoveCategory'),
        InlineKeyboardButton(text='—É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='RemoveSubCategory')
    ]
]
RemoveCategoryOrSubCategory = InlineKeyboardMarkup(inline_keyboard=RemoveCategoryOrSubCategoryButton)


AddSubCategoryButton = [
    [
        InlineKeyboardButton(text='–î–∞', callback_data='AddSubCategory')
    ],
    [
        InlineKeyboardButton(text='–ù–µ—Ç', callback_data='NoSubCategory')
    ],
    [
        InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='BackToMainMenuAdmin')
    ]
]
AddSubCategoryKeyboard = InlineKeyboardMarkup(inline_keyboard=AddSubCategoryButton)


AddProductToCategoryOrSubCategoryButton = [
    [
        InlineKeyboardButton(text='–≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='AddToSubCategory')
    ],
    [
        InlineKeyboardButton(text='–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='AddToCategory')
    ],
    [
        InlineKeyboardButton(text='—É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='DeleteProduct')
    ],
    [
        InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='BackToMainMenuAdmin')
    ]
]
AddProductToCategoryOrSubCategory = InlineKeyboardMarkup(inline_keyboard=AddProductToCategoryOrSubCategoryButton)


Balance = [
    [
        InlineKeyboardButton(text='üì•–ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='replenish_balance'),
    ],
    [
        InlineKeyboardButton(text='üì®–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π', callback_data='history_balance'),
        InlineKeyboardButton(text='üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', callback_data='history_order'),
    ]
]
BalanceKeyboard = InlineKeyboardMarkup(inline_keyboard=Balance)


BalanceSum = [
    [
        InlineKeyboardButton(text='250', callback_data='SumReplenish_250'),
        InlineKeyboardButton(text='500', callback_data='SumReplenish_500'),
        InlineKeyboardButton(text='2500', callback_data='SumReplenish_2500'),
    ],
    [
        InlineKeyboardButton(text='500', callback_data='SumReplenish_5000'),
        InlineKeyboardButton(text='10000', callback_data='SumReplenish_10000'),
        InlineKeyboardButton(text='25000', callback_data='SumReplenish_25000'),
    ]
]
BalanceSumKeyboard = InlineKeyboardMarkup(inline_keyboard=BalanceSum)


GetAllHistory = [
    [
        InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
                             callback_data='Get_All_History')
    ]
]
GetAllHistoryKeyboard = InlineKeyboardMarkup(inline_keyboard=GetAllHistory)

CheckTransButton = [
    [
        InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                             callback_data='checkTrans')
    ]
]
CheckTrans = InlineKeyboardMarkup(inline_keyboard=CheckTransButton)


NextOrderListButtonAdmin = [
    [
        InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='BackOrderListAdmin'),
        InlineKeyboardButton(text='–î–∞–ª—å—à–µ‚û°Ô∏è', callback_data='NextOrdersListAdmin')
    ],
    [
        InlineKeyboardButton(text='id', callback_data='SearchForId'),
        InlineKeyboardButton(text='–°—Å—ã–ª–∫–∞', callback_data='SearchForLink')
    ],
]
NextOrdersListAdmin = InlineKeyboardMarkup(inline_keyboard=NextOrderListButtonAdmin)


BackOrdersButtonAdmin = [
    [
        InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                             callback_data='BackOrderListAdmin')
    ],
    [
        InlineKeyboardButton(text='id', callback_data='SearchForId'),
        InlineKeyboardButton(text='–°—Å—ã–ª–∫–∞', callback_data='SearchForLink')
    ],
]
BackOrdersListAdmin = InlineKeyboardMarkup(inline_keyboard=BackOrdersButtonAdmin)


OnlyNextOrdersButtonAdmin = [
    [
        InlineKeyboardButton(text='–î–∞–ª—å—à–µ ‚û°Ô∏è',
                             callback_data='NextOrdersListAdmin')
    ],
    [
        InlineKeyboardButton(text='id', callback_data='SearchForId'),
        InlineKeyboardButton(text='–°—Å—ã–ª–∫–∞', callback_data='SearchForLink')
    ],
]
OnlyNextOrdersListAdmin = InlineKeyboardMarkup(inline_keyboard=OnlyNextOrdersButtonAdmin)


NextOrderListButton = [
    [
        InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='BackOrderList'),
        InlineKeyboardButton(text='–î–∞–ª—å—à–µ‚û°Ô∏è', callback_data='NextOrdersList')
    ]
]
NextOrdersList = InlineKeyboardMarkup(inline_keyboard=NextOrderListButton)


BackOrdersButton = [
    [
        InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                             callback_data='BackOrderList')
    ]
]
BackOrdersList = InlineKeyboardMarkup(inline_keyboard=BackOrdersButton)


NextOrdersButton = [
    [
        InlineKeyboardButton(text='–î–∞–ª—å—à–µ ‚û°Ô∏è',
                             callback_data='NextOrdersList')
    ]
]
OnlyNextOrdersList = InlineKeyboardMarkup(inline_keyboard=NextOrdersButton)


SearchOrdersAdminButton = [
    [
        InlineKeyboardButton(text='id', callback_data='SearchForId'),
        InlineKeyboardButton(text='–°—Å—ã–ª–∫–∞', callback_data='SearchForLink')
    ],
]
SearchOrdersAdminKeyboard = InlineKeyboardMarkup(inline_keyboard=SearchOrdersAdminButton)


CheckPersonOrMultiButton = [
    [
        InlineKeyboardButton(text='–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π', callback_data='personal_check'),
        InlineKeyboardButton(text='–ú—É–ª—å—Ç–∏-—á–µ–∫', callback_data='MultiCheck')
    ]
]
CheckPersonOrMultiKeyboard = InlineKeyboardMarkup(inline_keyboard=CheckPersonOrMultiButton)


BackCheck = [
    [
        InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='BacToPersonalCheck')
    ]
]
BackCheckKeyboard = InlineKeyboardMarkup(inline_keyboard=BackCheck)


Bots = [
    [
        InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞', callback_data='CreateBot'),
        InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞', callback_data='MyBot')
    ]
]
BotsKeyboard = InlineKeyboardMarkup(inline_keyboard=Bots)


async def check_maxmin_keyboard(max):
    check_button_max = [
        [
            InlineKeyboardButton(text='–ú–∏–Ω 0,1 —Ä—É–±', callback_data='auto_check_personal_0.1')
        ],
        [
            InlineKeyboardButton(text=f'–ú–∞–∫—Å {max} —Ä—É–±', callback_data=f'auto_check_personal_{max}')
        ]
    ]
    Keyboard = InlineKeyboardMarkup(inline_keyboard=check_button_max)
    return Keyboard


async def check_multi_maxmin_keyboard(max):
    check_button_max = [
        [
            InlineKeyboardButton(text='–ú–∏–Ω 0,1 —Ä—É–±', callback_data='auto_check_multi_0.1')
        ],
        [
            InlineKeyboardButton(text=f'–ú–∞–∫—Å {max} —Ä—É–±', callback_data=f'auto_check_multi_{max}')
        ]
    ]
    Keyboard = InlineKeyboardMarkup(inline_keyboard=check_button_max)
    return Keyboard


async def DeleteBot(IdUser):
    bots = await db.AllBotsForUser(IdUser)
    KeyboardDelete = InlineKeyboardBuilder()
    if not bots:
        answer = '–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤'
    else:
        answer = '–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞'
    for bot in bots:
        delete_bot = Bot(token=bot[1])
        name = await delete_bot.get_me()
        name = name.username
        BotsButton = InlineKeyboardButton(text=name, callback_data=f'con_delete_bot_{bot[1]}')
        KeyboardDelete.add(BotsButton)
    res = [answer, KeyboardDelete.as_markup()]
    return res


async def SubscribeCheck(StartCommand):
    ButtonCheckSubscribe = [
        [
            InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data=f'checkSubscribe_{StartCommand}')
        ]
    ]
    KeyboardCheckSubscribe = InlineKeyboardMarkup(inline_keyboard=ButtonCheckSubscribe)
    return KeyboardCheckSubscribe


async def AddChannel(checkid):
    AddChannelButton = [
        [
            InlineKeyboardButton(text='–ö–∞–Ω–∞–ª', callback_data=f'Channel_{checkid}'),
            InlineKeyboardButton(text='–ü—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞', callback_data=f'PublicGroup_{checkid}')
        ],
        [
            InlineKeyboardButton(text='–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞', callback_data=f'PrivateGroup_{checkid}')
        ],
        [
            InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='BacToPersonalCheck')
        ]
    ]
    AddChannelKeyboard = InlineKeyboardMarkup(inline_keyboard=AddChannelButton)
    return AddChannelKeyboard


async def DeleteChannel(CheckId):
    DeleteChannelKeyboard = InlineKeyboardBuilder()
    Check = await db.GetCheckForUser(None, CheckId)
    ChannelId = Check[8]
    ChanneResultId = ChannelId.split(',')
    print(ChanneResultId)
    for ID in ChanneResultId:
        if ID != '':
            Channel = await db.GetChannelTittle(ID)
            ButtonCheck = InlineKeyboardButton(text=f'{Channel}', callback_data=f'channel_{ID}')
            DeleteChannelButton = InlineKeyboardButton(text='—É–¥–∞–ª–∏—Ç—å', callback_data=f'deletechannel_{ID}')
            DeleteChannelKeyboard.row(ButtonCheck).add(DeleteChannelButton)
    AddSubscribe = InlineKeyboardButton(text='–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data=f'Add_Subscribe_{Check[5]}')
    DeleteChannelKeyboard.row(AddSubscribe)
    GoBack = InlineKeyboardButton(text='‚¨ÖÔ∏è–Ω–∞–∑–∞–¥', callback_data='BacToPersonalCheck')
    DeleteChannelKeyboard.row(GoBack)
    return DeleteChannelKeyboard.as_markup()


async def ConfirmCheck(TypeCheck):
    UserConfirmCheckButton = [
        [
            InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data=f'ConfirmCheck_{TypeCheck}'),
            InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω—è—é', callback_data='personal_check')
        ],
        [
            InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', callback_data='GenerateCheckForPersonal')
        ],
        [
            InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='BacToPersonalCheck')
        ]
    ]
    UserConfirmCheckKeyboard = InlineKeyboardMarkup(inline_keyboard=UserConfirmCheckButton)
    return UserConfirmCheckKeyboard


async def GenerateCheckPersonal(user_id):
    print('personal check')
    GenerateCheckKeyboard = InlineKeyboardBuilder()
    GenerateCheckButton = InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å —á–µ–∫', callback_data='GenerateCheckForPersonal')
    checks = await db.GetCheckForUser(user_id)
    GenerateCheckKeyboard.row(GenerateCheckButton)
    PersonalCheck = 0
    if len(checks) > 0:
        for check in checks:
            if check[7] == 'personal':
                PersonalCheck += 1
        HowMuchCheck = InlineKeyboardButton(text=f'–ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —á–µ–∫–∏: {PersonalCheck}',
                                            callback_data='MyPersonalCheck')
        if PersonalCheck != 0:
            GenerateCheckKeyboard.row(HowMuchCheck)
    return GenerateCheckKeyboard.as_markup()


async def GenerateCheckMulti(user_id):
    GenerateCheckKeyboard = InlineKeyboardBuilder()
    GenerateCheckButton = InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å —á–µ–∫', callback_data='GenerateCheckMulti')
    checks = await db.GetCheckForUser(user_id)
    GenerateCheckKeyboard.row(GenerateCheckButton)
    MultiCheck = 0
    if len(checks) > 0:
        for check in checks:
            if check[7] == 'multi':
                MultiCheck += 1
        HowMuchCheck = InlineKeyboardButton(text=f'–ú–æ–∏ –º—É–ª—å—Ç–∏ —á–µ–∫–∏: {MultiCheck}', callback_data='MyMultiCheck')
        if MultiCheck != 0:
            GenerateCheckKeyboard.row(HowMuchCheck)
    return GenerateCheckKeyboard.as_markup()


async def AllUserCheck(user_id, status):
    AllUserCheckKeyboard = InlineKeyboardBuilder()
    checks = await db.GetCheckForUser(user_id)
    if status == 'multi':
        for check in checks:
            if check[7] == status:
                button = InlineKeyboardButton(text=str(check[2]), callback_data=f'check_{check[0]}')
                AllUserCheckKeyboard.row(button)
    else:
        for check in checks:
            if check[7] == status:
                button = InlineKeyboardButton(text=str(check[2]), callback_data=f'check_{check[0]}')
                AllUserCheckKeyboard.row(button)
    return AllUserCheckKeyboard.as_markup()


async def ForPersonalUserResultCheck(LinkCheckId):
    Check = await db.GetCheckForUser(None, None, LinkCheckId)
    print(Check)
    if Check[7] == 'personal':
        ForPersonalUserResultCheckButton = [
            [
                InlineKeyboardButton(text='üíµ–û—Ç–ø—Ä–∞–≤–∏—Ç—å', switch_inline_query=f'{LinkCheckId}')
            ],
            [
                InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'DeleteCheck_{LinkCheckId}')
            ],
            [
                InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='BacToPersonalCheck')
            ]
        ]
        ForPersonalUserResultCheckKeyboard = InlineKeyboardMarkup(inline_keyboard=ForPersonalUserResultCheckButton)
        return ForPersonalUserResultCheckKeyboard
    else:
        ForMultiCheckButton = [
            [
                InlineKeyboardButton(text='üíµ–û—Ç–ø—Ä–∞–≤–∏—Ç—å', switch_inline_query=f'{LinkCheckId}')
            ],
            [
                InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data=f'Add_Subscribe_{LinkCheckId}')
            ],
            [
                InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã', callback_data=f'CheckChannel_{LinkCheckId}')
            ],
            [
                InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'DeleteCheck_{LinkCheckId}')
            ],
            [
                InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='BacToPersonalCheck')
            ]
        ]
        ForMultiCheckKeyboard = InlineKeyboardMarkup(inline_keyboard=ForMultiCheckButton)
        return ForMultiCheckKeyboard


async def confirm_delete(checkID):
    ConfirmButton = [
        [
            InlineKeyboardButton(text='‚úÖ–î–∞', callback_data=f'confirm_delete_{checkID}'),
            InlineKeyboardButton(text='‚ùå–ù–µ—Ç', callback_data='no_confirm_delete')
        ]
    ]
    confirm_delete_keyboard = InlineKeyboardMarkup(inline_keyboard=ConfirmButton)
    return confirm_delete_keyboard


async def confirm_bot(BotID):
    ConfirmButton = [
        [
            InlineKeyboardButton(text='‚úÖ–î–∞', callback_data=f'delete_bot_{BotID}'),
            InlineKeyboardButton(text='‚ùå–ù–µ—Ç', callback_data='no_confirm_bot')
        ]
    ]
    confirm_delete_keyboard = InlineKeyboardMarkup(inline_keyboard=ConfirmButton)
    return confirm_delete_keyboard


async def TegroPay(url, crypto_bot_url):
    PayKeyboard = InlineKeyboardBuilder()
    PayButton = InlineKeyboardButton(
        text='üí≥–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π',
        url=url
    )
    TegrMoney = InlineKeyboardButton(
        text='üí∞USDT(Tegro Pay)',
        url=url
    )
    CryptoBot = InlineKeyboardButton(
        text='üíéCrypto Bot',
        url=crypto_bot_url
    )
    PayKeyboard.row(PayButton).row(TegrMoney).row(CryptoBot)
    return PayKeyboard.as_markup()


async def CategoryMarkup(act):
    CategoryInlineMarkup = InlineKeyboardBuilder()
    if config.Service == 'All':
        categories = await db.GetCategory()
    else:
        categories = await db.GetCategory(config.Service)
    for category in categories:
        if category[2] == 'None':
            button = InlineKeyboardButton(
                text=category[1],
                callback_data=f'{act}_category_{category[0]}'
            )
            CategoryInlineMarkup.row(button)
    return CategoryInlineMarkup.as_markup()


async def SubCategory(act, ParentId):
    CategoryInlineMarkup = InlineKeyboardBuilder()
    categories = await db.GetSubCategory(ParentId)
    for category in categories:
        if category[2] != 'None':
            button = InlineKeyboardButton(
                text=category[1],
                callback_data=f'{act}_subcategory_{category[0]}'
            )
            CategoryInlineMarkup.row(button)
    return CategoryInlineMarkup.as_markup()


async def SubCategoryMarkup(act):
    CategoryInlineMarkup = InlineKeyboardBuilder()
    categories = await db.GetCategory()
    for category in categories:
        if category[2] != 'None':
            button = InlineKeyboardButton(
                text=category[1],
                callback_data=f'{act}_category_{category[0]}'
            )
            CategoryInlineMarkup.row(button)
    return CategoryInlineMarkup.as_markup()


async def CategoryAndSubCategory(act):
    CategoryInlineMarkup = InlineKeyboardBuilder()
    categories = await db.GetCategory()
    for category in categories:
        button = InlineKeyboardButton(
            text=category[1],
            callback_data=f'{act}_category_{category[0]}'
        )
        CategoryInlineMarkup.row(button)
    return CategoryInlineMarkup.as_markup()


async def CheckProduct(act, ParentId):
    ProductInlineMarkup = InlineKeyboardBuilder()
    product = await db.GetProduct(ParentId)
    for products in product:
        button = InlineKeyboardButton(
            text=products[2],
            callback_data=f'{act}_product_{products[0]}'
        )
        ProductInlineMarkup.row(button)
    return ProductInlineMarkup.as_markup()
